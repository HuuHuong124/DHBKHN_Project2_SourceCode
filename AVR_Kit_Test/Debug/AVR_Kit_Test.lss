
AVR_Kit_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  0000095c  000009d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000130  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000128e  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000351  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000066d  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000314  00000000  00000000  0000287c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000475  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d66  00000000  00000000  00003005  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000140  00000000  00000000  00003d6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 33       	cpi	r26, 0x32	; 50
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e3       	ldi	r26, 0x32	; 50
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 33       	cpi	r26, 0x32	; 50
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 ac 04 	jmp	0x958	; 0x958 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_INIT>:
	}
	for(i=lcd4_length;i>0;i--)
	{
		LCD4_OUT_DATA(lcd4_temp[i-1]);
	}
}
  92:	90 bd       	out	0x20, r25	; 32
  94:	89 b9       	out	0x09, r24	; 9
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	88 69       	ori	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	52 98       	cbi	0x0a, 2	; 10
  9e:	66 30       	cpi	r22, 0x06	; 6
  a0:	69 f0       	breq	.+26     	; 0xbc <UART_INIT+0x2a>
  a2:	18 f4       	brcc	.+6      	; 0xaa <UART_INIT+0x18>
  a4:	65 30       	cpi	r22, 0x05	; 5
  a6:	31 f0       	breq	.+12     	; 0xb4 <UART_INIT+0x22>
  a8:	0e c0       	rjmp	.+28     	; 0xc6 <UART_INIT+0x34>
  aa:	67 30       	cpi	r22, 0x07	; 7
  ac:	29 f0       	breq	.+10     	; 0xb8 <UART_INIT+0x26>
  ae:	69 30       	cpi	r22, 0x09	; 9
  b0:	39 f0       	breq	.+14     	; 0xc0 <UART_INIT+0x2e>
	UCSRB |= (1<<RXEN)|(1<<TXEN)| (1<<RXCIE); // Thay bang cai nay kich hoat ngat khi nhan
	// Dinh kich thuoc khung du lieu

	UCSRB &= ~(1<<UCSZ2);

	switch(uart_size)
  b2:	09 c0       	rjmp	.+18     	; 0xc6 <UART_INIT+0x34>

// -----------------------------------------------------------------------------------

void UART_INIT(unsigned int uart_ubrr, unsigned char uart_size, unsigned char uart_parity, unsigned char uart_stop)
{
	unsigned char uart_control = 0x80;
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <UART_INIT+0x36>
	UCSRB &= ~(1<<UCSZ2);

	switch(uart_size)
	{
		case 8:	uart_control |= 0x06; break;
		case 7: uart_control |= 0x04; break;
  b8:	84 e8       	ldi	r24, 0x84	; 132
  ba:	06 c0       	rjmp	.+12     	; 0xc8 <UART_INIT+0x36>
		case 6: uart_control |= 0x02; break;
  bc:	82 e8       	ldi	r24, 0x82	; 130
  be:	04 c0       	rjmp	.+8      	; 0xc8 <UART_INIT+0x36>
		case 5: break;
		case 9:
		{
			uart_control |= 0x06;
			UCSRB |= (1<<UCSZ2);
  c0:	52 9a       	sbi	0x0a, 2	; 10
		case 7: uart_control |= 0x04; break;
		case 6: uart_control |= 0x02; break;
		case 5: break;
		case 9:
		{
			uart_control |= 0x06;
  c2:	86 e8       	ldi	r24, 0x86	; 134
			UCSRB |= (1<<UCSZ2);
			break;
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <UART_INIT+0x36>

	UCSRB &= ~(1<<UCSZ2);

	switch(uart_size)
	{
		case 8:	uart_control |= 0x06; break;
  c6:	86 e8       	ldi	r24, 0x86	; 134
		default: uart_control |= 0x06;
	}

	// Khoi tao modul parity

	if(uart_parity == 1)
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	11 f4       	brne	.+4      	; 0xd0 <UART_INIT+0x3e>
		uart_control |= 0x30;
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <UART_INIT+0x44>
	if(uart_parity == 2)
  d0:	42 30       	cpi	r20, 0x02	; 2
  d2:	09 f4       	brne	.+2      	; 0xd6 <UART_INIT+0x44>
		uart_control |= 0x20;
  d4:	80 62       	ori	r24, 0x20	; 32

	// Chon so bit stop

	if(uart_stop == 2)
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	09 f4       	brne	.+2      	; 0xdc <UART_INIT+0x4a>
		uart_control |= 0x08;
  da:	88 60       	ori	r24, 0x08	; 8

	// Nap vao UCSRC

	UCSRC = uart_control;
  dc:	80 bd       	out	0x20, r24	; 32
  de:	08 95       	ret

000000e0 <UART_TRAN_BYTE>:
}

void UART_TRAN_BYTE(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)));
  e0:	5d 9b       	sbis	0x0b, 5	; 11
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <UART_TRAN_BYTE>

	UDR = uart_data;
  e4:	8c b9       	out	0x0c, r24	; 12
  e6:	08 95       	ret

000000e8 <UART_TRAN_STR>:
}

void UART_TRAN_STR(char *uart_str)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	while(*uart_str)
  ee:	88 81       	ld	r24, Y
  f0:	88 23       	and	r24, r24
  f2:	31 f0       	breq	.+12     	; 0x100 <UART_TRAN_STR+0x18>
  f4:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_TRAN_BYTE(*uart_str);
  f6:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TRAN_BYTE>
	UDR = uart_data;
}

void UART_TRAN_STR(char *uart_str)
{
	while(*uart_str)
  fa:	89 91       	ld	r24, Y+
  fc:	81 11       	cpse	r24, r1
  fe:	fb cf       	rjmp	.-10     	; 0xf6 <UART_TRAN_STR+0xe>
	{
		UART_TRAN_BYTE(*uart_str);
		uart_str++;
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <USART_ReceiveByte>:
// Day la ham nhan UART duoc viet them

uint8_t USART_ReceiveByte(){
  while((UCSRA &(1<<RXC)) == 0);
 106:	5f 9b       	sbis	0x0b, 7	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <USART_ReceiveByte>
  return UDR;
 10a:	8c b1       	in	r24, 0x0c	; 12
}
 10c:	08 95       	ret

0000010e <LCD_Command>:
#define EN PD7				


void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
 10e:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port &= ~(1<<RS);	
 110:	96 98       	cbi	0x12, 6	; 18
	LCD_Command_Port &= ~(1<<RW);	
 112:	95 98       	cbi	0x12, 5	; 18
	LCD_Command_Port |= (1<<EN);	
 114:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 118:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8d ee       	ldi	r24, 0xED	; 237
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Command+0x10>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Command+0x16>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <LCD_Char>:
	_delay_ms(3);
}

void LCD_Char (unsigned char char_data)	
{
	LCD_Data_Port= char_data;
 128:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<RS);	
 12a:	96 9a       	sbi	0x12, 6	; 18
	LCD_Command_Port &= ~(1<<RW);	
 12c:	95 98       	cbi	0x12, 5	; 18
	LCD_Command_Port |= (1<<EN);	
 12e:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 132:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_Char+0x10>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_Char+0x16>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <LCD_Init>:
	_delay_ms(1);
}

void LCD_Init (void)			
{
	LCD_Command_Dir = 0xFF;		
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	81 bb       	out	0x11, r24	; 17
	LCD_Data_Dir = 0xFF;		
 146:	84 bb       	out	0x14, r24	; 20
 148:	87 e8       	ldi	r24, 0x87	; 135
 14a:	93 e1       	ldi	r25, 0x13	; 19
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0xa>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x10>
 152:	00 00       	nop
	_delay_ms(20);			
	
	LCD_Command (0x38);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_Command (0x0C);		
 15a:	8c e0       	ldi	r24, 0x0C	; 12
 15c:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_Command (0x06);		
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_Command (0x01);		
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_Command (0x80);		
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
 172:	08 95       	ret

00000174 <LCD_String>:
}

void LCD_String (char *str)		
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <LCD_String+0x18>
 180:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 182:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Char>
}

void LCD_String (char *str)		
{
	int i;
	for(i=0;str[i]!=0;i++)		
 186:	89 91       	ld	r24, Y+
 188:	81 11       	cpse	r24, r1
 18a:	fb cf       	rjmp	.-10     	; 0x182 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <LCD_Clear>:
	LCD_String(str);		
}

void LCD_Clear()
{
	LCD_Command (0x01);		
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_Command (0x80);		
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
 19e:	83 ec       	ldi	r24, 0xC3	; 195
 1a0:	99 e0       	ldi	r25, 0x09	; 9
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Clear+0x10>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Clear+0x16>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <delay_ms>:
}

void delay_ms(unsigned int count) // Ham delay nay toi viet lai
{
	unsigned int i;
	count = pre*count; // pre = 8 do PRE 8MHz
 1ac:	20 91 60 00 	lds	r18, 0x0060
 1b0:	ac 01       	movw	r20, r24
 1b2:	24 9f       	mul	r18, r20
 1b4:	c0 01       	movw	r24, r0
 1b6:	25 9f       	mul	r18, r21
 1b8:	90 0d       	add	r25, r0
 1ba:	11 24       	eor	r1, r1
	for(i=0;i<count;i++){
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	69 f0       	breq	.+26     	; 0x1da <delay_ms+0x2e>
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	e9 ef       	ldi	r30, 0xF9	; 249
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <delay_ms+0x1c>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <delay_ms+0x22>
 1ce:	00 00       	nop
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255
 1d4:	28 17       	cp	r18, r24
 1d6:	39 07       	cpc	r19, r25
 1d8:	a9 f7       	brne	.-22     	; 0x1c4 <delay_ms+0x18>
 1da:	08 95       	ret

000001dc <get_SDS011>:

// Bai tap luyen tap cuoi ki, doc cam bien bui min SDS011 hien thi ra LCD va UART
// SDS011 la cam bien do bui PM2.5 va PM10, giao thuc ket noi la UART 9600
// Vi ATmega16 chi co 1 UART nen toi chia ra Rx de doc cam bien, Tx de gui du lieu di
void get_SDS011()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	a9 97       	sbiw	r28, 0x29	; 41
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	UART_INIT(51, 8, 0 ,1);
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	68 e0       	ldi	r22, 0x08	; 8
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <UART_INIT>
	char sdsPm25;
	char sdsPm10;
	uint8_t UARTprint[30];
	LCD_Init();			
 1fe:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_Init>
	LCD_Clear();
 202:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_Clear>
	LCD_Command(0x80);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_String("Pm2.5 = ---- ug");
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
	LCD_Command(0xC0);
 214:	80 ec       	ldi	r24, 0xC0	; 192
 216:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
	LCD_String("Pm 10 = ---- ug");
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
	while(1)
	{
		//UART_TRAN_STR("-------Lay du lieu------  ");
		uint8_t sdsData = 0;
		uint8_t i = 0;
		uint8_t sdsDust[10] = {0};
 222:	0f 2e       	mov	r0, r31
 224:	fa e0       	ldi	r31, 0x0A	; 10
 226:	4f 2e       	mov	r4, r31
 228:	f0 2d       	mov	r31, r0
 22a:	6e 01       	movw	r12, r28
 22c:	8f e1       	ldi	r24, 0x1F	; 31
 22e:	c8 0e       	add	r12, r24
 230:	d1 1c       	adc	r13, r1
 232:	7e 01       	movw	r14, r28
 234:	97 e2       	ldi	r25, 0x27	; 39
 236:	e9 0e       	add	r14, r25
 238:	f1 1c       	adc	r15, r1
					UART_TRAN_BYTE(10);
					*/
					if(sdsChecksum == sdsDust[8])  //ok
					{
						sdsPm25 = (sdsDust[3]*256 + sdsDust[2])/10;
						sdsPm10 = (sdsDust[5]*256 + sdsDust[4])/10;
 23a:	0f 2e       	mov	r0, r31
 23c:	fa e0       	ldi	r31, 0x0A	; 10
 23e:	8f 2e       	mov	r8, r31
 240:	91 2c       	mov	r9, r1
 242:	f0 2d       	mov	r31, r0
						
						// hien thi ra UART
						sprintf(UARTprint,"%4d",sdsPm25);
 244:	0f 2e       	mov	r0, r31
 246:	fa e9       	ldi	r31, 0x9A	; 154
 248:	6f 2e       	mov	r6, r31
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	7f 2e       	mov	r7, r31
 24e:	f0 2d       	mov	r31, r0
 250:	fe 01       	movw	r30, r28
 252:	31 96       	adiw	r30, 0x01	; 1
 254:	5f 01       	movw	r10, r30
			delay_ms(2);// d?i l?y d? li?u
			if(sdsData == 0xAA) //head1 ok
			{
				sdsDust[0] =  sdsData;
				sdsData = UDR;
				if(sdsData == 0xc0)//head2 ok
 256:	51 2c       	mov	r5, r1
					{
						sdsPm25 = (sdsDust[3]*256 + sdsDust[2])/10;
						sdsPm10 = (sdsDust[5]*256 + sdsDust[4])/10;
						
						// hien thi ra UART
						sprintf(UARTprint,"%4d",sdsPm25);
 258:	3e 2e       	mov	r3, r30
 25a:	b9 a6       	std	Y+41, r11	; 0x29
	while(1)
	{
		//UART_TRAN_STR("-------Lay du lieu------  ");
		uint8_t sdsData = 0;
		uint8_t i = 0;
		uint8_t sdsDust[10] = {0};
 25c:	f6 01       	movw	r30, r12
 25e:	84 2d       	mov	r24, r4
 260:	11 92       	st	Z+, r1
 262:	8a 95       	dec	r24
 264:	e9 f7       	brne	.-6      	; 0x260 <get_SDS011+0x84>
		uint8_t sdsChecksum = 0;
		while ((UCSRA &(1<<RXC)) != 0)
 266:	7a c0       	rjmp	.+244    	; 0x35c <get_SDS011+0x180>
		{
			sdsData = UDR;
 268:	1c b1       	in	r17, 0x0c	; 12
			delay_ms(2);// d?i l?y d? li?u
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <delay_ms>
			if(sdsData == 0xAA) //head1 ok
 272:	1a 3a       	cpi	r17, 0xAA	; 170
 274:	09 f0       	breq	.+2      	; 0x278 <get_SDS011+0x9c>
 276:	72 c0       	rjmp	.+228    	; 0x35c <get_SDS011+0x180>
			{
				sdsDust[0] =  sdsData;
				sdsData = UDR;
 278:	8c b1       	in	r24, 0x0c	; 12
				if(sdsData == 0xc0)//head2 ok
 27a:	80 3c       	cpi	r24, 0xC0	; 192
 27c:	09 f0       	breq	.+2      	; 0x280 <get_SDS011+0xa4>
 27e:	6e c0       	rjmp	.+220    	; 0x35c <get_SDS011+0x180>
 280:	8e 01       	movw	r16, r28
 282:	0f 5d       	subi	r16, 0xDF	; 223
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	25 2c       	mov	r2, r5
				{
					sdsDust[1] =  sdsData;
					sdsChecksum = 0;
					for(i=0;i < 6;i++)//lay data
					{
						sdsDust[i+2] = USART_ReceiveByte();
 288:	0e 94 83 00 	call	0x106	; 0x106 <USART_ReceiveByte>
 28c:	f8 01       	movw	r30, r16
 28e:	81 93       	st	Z+, r24
 290:	8f 01       	movw	r16, r30
						sdsChecksum += sdsDust[i+2];
 292:	28 0e       	add	r2, r24
				sdsData = UDR;
				if(sdsData == 0xc0)//head2 ok
				{
					sdsDust[1] =  sdsData;
					sdsChecksum = 0;
					for(i=0;i < 6;i++)//lay data
 294:	ee 15       	cp	r30, r14
 296:	ff 05       	cpc	r31, r15
 298:	b9 f7       	brne	.-18     	; 0x288 <get_SDS011+0xac>
					{
						sdsDust[i+2] = USART_ReceiveByte();
						sdsChecksum += sdsDust[i+2];
					}
					sdsDust[8] = USART_ReceiveByte();
 29a:	0e 94 83 00 	call	0x106	; 0x106 <USART_ReceiveByte>
 29e:	18 2f       	mov	r17, r24
					sdsDust[9] = USART_ReceiveByte();
 2a0:	0e 94 83 00 	call	0x106	; 0x106 <USART_ReceiveByte>
					sprintf(UARTprint,"%5x",sdsChecksum);
					UART_TRAN_STR(UARTprint);
					UART_TRAN_BYTE(13);
					UART_TRAN_BYTE(10);
					*/
					if(sdsChecksum == sdsDust[8])  //ok
 2a4:	21 12       	cpse	r2, r17
 2a6:	5a c0       	rjmp	.+180    	; 0x35c <get_SDS011+0x180>
					{
						sdsPm25 = (sdsDust[3]*256 + sdsDust[2])/10;
						sdsPm10 = (sdsDust[5]*256 + sdsDust[4])/10;
 2a8:	8c a1       	ldd	r24, Y+36	; 0x24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	98 2f       	mov	r25, r24
 2ae:	88 27       	eor	r24, r24
 2b0:	2b a1       	ldd	r18, Y+35	; 0x23
 2b2:	82 0f       	add	r24, r18
 2b4:	91 1d       	adc	r25, r1
 2b6:	b4 01       	movw	r22, r8
 2b8:	0e 94 b3 01 	call	0x366	; 0x366 <__divmodhi4>
 2bc:	8b 01       	movw	r16, r22
					UART_TRAN_BYTE(13);
					UART_TRAN_BYTE(10);
					*/
					if(sdsChecksum == sdsDust[8])  //ok
					{
						sdsPm25 = (sdsDust[3]*256 + sdsDust[2])/10;
 2be:	8a a1       	ldd	r24, Y+34	; 0x22
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	98 2f       	mov	r25, r24
 2c4:	88 27       	eor	r24, r24
 2c6:	29 a1       	ldd	r18, Y+33	; 0x21
 2c8:	82 0f       	add	r24, r18
 2ca:	91 1d       	adc	r25, r1
 2cc:	b4 01       	movw	r22, r8
 2ce:	0e 94 b3 01 	call	0x366	; 0x366 <__divmodhi4>
						sdsPm10 = (sdsDust[5]*256 + sdsDust[4])/10;
						
						// hien thi ra UART
						sprintf(UARTprint,"%4d",sdsPm25);
 2d2:	77 27       	eor	r23, r23
 2d4:	7f 93       	push	r23
 2d6:	6f 93       	push	r22
 2d8:	7f 92       	push	r7
 2da:	6f 92       	push	r6
 2dc:	bf 92       	push	r11
 2de:	af 92       	push	r10
 2e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <sprintf>
						UART_TRAN_STR("Pm2.5 = ");
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_TRAN_STR>
						UART_TRAN_STR(UARTprint);
 2ec:	83 2d       	mov	r24, r3
 2ee:	99 a5       	ldd	r25, Y+41	; 0x29
 2f0:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_TRAN_STR>
						UART_TRAN_BYTE(13);
 2f4:	8d e0       	ldi	r24, 0x0D	; 13
 2f6:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TRAN_BYTE>
						UART_TRAN_BYTE(10);
 2fa:	84 2d       	mov	r24, r4
 2fc:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TRAN_BYTE>
						// hien thi ra LCD
						LCD_Command(0x88);
 300:	88 e8       	ldi	r24, 0x88	; 136
 302:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
						LCD_String(UARTprint);
 306:	83 2d       	mov	r24, r3
 308:	99 a5       	ldd	r25, Y+41	; 0x29
 30a:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
						
						sprintf(UARTprint,"%4d",sdsPm10);
 30e:	11 27       	eor	r17, r17
 310:	1f 93       	push	r17
 312:	0f 93       	push	r16
 314:	7f 92       	push	r7
 316:	6f 92       	push	r6
 318:	bf 92       	push	r11
 31a:	af 92       	push	r10
 31c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <sprintf>
						UART_TRAN_STR("Pm10  = ");
 320:	88 e2       	ldi	r24, 0x28	; 40
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_TRAN_STR>
						UART_TRAN_STR(UARTprint);
 328:	83 2d       	mov	r24, r3
 32a:	99 a5       	ldd	r25, Y+41	; 0x29
 32c:	0e 94 74 00 	call	0xe8	; 0xe8 <UART_TRAN_STR>
						UART_TRAN_BYTE(13);
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TRAN_BYTE>
						UART_TRAN_BYTE(10);
 336:	84 2d       	mov	r24, r4
 338:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_TRAN_BYTE>
						LCD_Command(0xC8);
 33c:	88 ec       	ldi	r24, 0xC8	; 200
 33e:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Command>
						LCD_String(UARTprint);
 342:	83 2d       	mov	r24, r3
 344:	99 a5       	ldd	r25, Y+41	; 0x29
 346:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_String>
						delay_ms(1000);
 34a:	88 ee       	ldi	r24, 0xE8	; 232
 34c:	93 e0       	ldi	r25, 0x03	; 3
 34e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <delay_ms>
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
		//UART_TRAN_STR("-------Lay du lieu------  ");
		uint8_t sdsData = 0;
		uint8_t i = 0;
		uint8_t sdsDust[10] = {0};
		uint8_t sdsChecksum = 0;
		while ((UCSRA &(1<<RXC)) != 0)
 35c:	5f 99       	sbic	0x0b, 7	; 11
 35e:	84 cf       	rjmp	.-248    	; 0x268 <get_SDS011+0x8c>
 360:	7d cf       	rjmp	.-262    	; 0x25c <get_SDS011+0x80>

00000362 <main>:
		
	/**********************************************************************************
	 * Bai tap luyen tap cuoi ki, doc cam bien bui min SDS011 hien thi ra LCD va UART *
	 * SDS011 la cam bien do bui PM2.5 va PM10, giao thuc ket noi la UART 9600        *
	 * Vi ATmega16 chi co 1 UART nen chia ra Rx de doc cam bien, Tx de gui du lieu    */
		get_SDS011();
 362:	0e 94 ee 00 	call	0x1dc	; 0x1dc <get_SDS011>

00000366 <__divmodhi4>:
 366:	97 fb       	bst	r25, 7
 368:	07 2e       	mov	r0, r23
 36a:	16 f4       	brtc	.+4      	; 0x370 <__divmodhi4+0xa>
 36c:	00 94       	com	r0
 36e:	07 d0       	rcall	.+14     	; 0x37e <__divmodhi4_neg1>
 370:	77 fd       	sbrc	r23, 7
 372:	09 d0       	rcall	.+18     	; 0x386 <__divmodhi4_neg2>
 374:	0e 94 c7 01 	call	0x38e	; 0x38e <__udivmodhi4>
 378:	07 fc       	sbrc	r0, 7
 37a:	05 d0       	rcall	.+10     	; 0x386 <__divmodhi4_neg2>
 37c:	3e f4       	brtc	.+14     	; 0x38c <__divmodhi4_exit>

0000037e <__divmodhi4_neg1>:
 37e:	90 95       	com	r25
 380:	81 95       	neg	r24
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__divmodhi4_neg2>:
 386:	70 95       	com	r23
 388:	61 95       	neg	r22
 38a:	7f 4f       	sbci	r23, 0xFF	; 255

0000038c <__divmodhi4_exit>:
 38c:	08 95       	ret

0000038e <__udivmodhi4>:
 38e:	aa 1b       	sub	r26, r26
 390:	bb 1b       	sub	r27, r27
 392:	51 e1       	ldi	r21, 0x11	; 17
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <__udivmodhi4_ep>

00000396 <__udivmodhi4_loop>:
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	a6 17       	cp	r26, r22
 39c:	b7 07       	cpc	r27, r23
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__udivmodhi4_ep>
 3a0:	a6 1b       	sub	r26, r22
 3a2:	b7 0b       	sbc	r27, r23

000003a4 <__udivmodhi4_ep>:
 3a4:	88 1f       	adc	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	5a 95       	dec	r21
 3aa:	a9 f7       	brne	.-22     	; 0x396 <__udivmodhi4_loop>
 3ac:	80 95       	com	r24
 3ae:	90 95       	com	r25
 3b0:	bc 01       	movw	r22, r24
 3b2:	cd 01       	movw	r24, r26
 3b4:	08 95       	ret

000003b6 <sprintf>:
 3b6:	ae e0       	ldi	r26, 0x0E	; 14
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e1 ee       	ldi	r30, 0xE1	; 225
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	0c 94 83 04 	jmp	0x906	; 0x906 <__prologue_saves__+0x1c>
 3c2:	0d 89       	ldd	r16, Y+21	; 0x15
 3c4:	1e 89       	ldd	r17, Y+22	; 0x16
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	8c 83       	std	Y+4, r24	; 0x04
 3ca:	1a 83       	std	Y+2, r17	; 0x02
 3cc:	09 83       	std	Y+1, r16	; 0x01
 3ce:	8f ef       	ldi	r24, 0xFF	; 255
 3d0:	9f e7       	ldi	r25, 0x7F	; 127
 3d2:	9e 83       	std	Y+6, r25	; 0x06
 3d4:	8d 83       	std	Y+5, r24	; 0x05
 3d6:	ae 01       	movw	r20, r28
 3d8:	47 5e       	subi	r20, 0xE7	; 231
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	6f 89       	ldd	r22, Y+23	; 0x17
 3de:	78 8d       	ldd	r23, Y+24	; 0x18
 3e0:	ce 01       	movw	r24, r28
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vfprintf>
 3e8:	ef 81       	ldd	r30, Y+7	; 0x07
 3ea:	f8 85       	ldd	r31, Y+8	; 0x08
 3ec:	e0 0f       	add	r30, r16
 3ee:	f1 1f       	adc	r31, r17
 3f0:	10 82       	st	Z, r1
 3f2:	2e 96       	adiw	r28, 0x0e	; 14
 3f4:	e4 e0       	ldi	r30, 0x04	; 4
 3f6:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__epilogue_restores__+0x1c>

000003fa <vfprintf>:
 3fa:	ac e0       	ldi	r26, 0x0C	; 12
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e3 e0       	ldi	r30, 0x03	; 3
 400:	f2 e0       	ldi	r31, 0x02	; 2
 402:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__prologue_saves__>
 406:	7c 01       	movw	r14, r24
 408:	6b 01       	movw	r12, r22
 40a:	8a 01       	movw	r16, r20
 40c:	fc 01       	movw	r30, r24
 40e:	17 82       	std	Z+7, r1	; 0x07
 410:	16 82       	std	Z+6, r1	; 0x06
 412:	83 81       	ldd	r24, Z+3	; 0x03
 414:	81 ff       	sbrs	r24, 1
 416:	bd c1       	rjmp	.+890    	; 0x792 <__stack+0x333>
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	4c 01       	movw	r8, r24
 41e:	f7 01       	movw	r30, r14
 420:	93 81       	ldd	r25, Z+3	; 0x03
 422:	f6 01       	movw	r30, r12
 424:	93 fd       	sbrc	r25, 3
 426:	85 91       	lpm	r24, Z+
 428:	93 ff       	sbrs	r25, 3
 42a:	81 91       	ld	r24, Z+
 42c:	6f 01       	movw	r12, r30
 42e:	88 23       	and	r24, r24
 430:	09 f4       	brne	.+2      	; 0x434 <vfprintf+0x3a>
 432:	ab c1       	rjmp	.+854    	; 0x78a <__stack+0x32b>
 434:	85 32       	cpi	r24, 0x25	; 37
 436:	39 f4       	brne	.+14     	; 0x446 <vfprintf+0x4c>
 438:	93 fd       	sbrc	r25, 3
 43a:	85 91       	lpm	r24, Z+
 43c:	93 ff       	sbrs	r25, 3
 43e:	81 91       	ld	r24, Z+
 440:	6f 01       	movw	r12, r30
 442:	85 32       	cpi	r24, 0x25	; 37
 444:	29 f4       	brne	.+10     	; 0x450 <vfprintf+0x56>
 446:	b7 01       	movw	r22, r14
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 44e:	e7 cf       	rjmp	.-50     	; 0x41e <vfprintf+0x24>
 450:	51 2c       	mov	r5, r1
 452:	31 2c       	mov	r3, r1
 454:	20 e0       	ldi	r18, 0x00	; 0
 456:	20 32       	cpi	r18, 0x20	; 32
 458:	a0 f4       	brcc	.+40     	; 0x482 <__stack+0x23>
 45a:	8b 32       	cpi	r24, 0x2B	; 43
 45c:	69 f0       	breq	.+26     	; 0x478 <__stack+0x19>
 45e:	30 f4       	brcc	.+12     	; 0x46c <__stack+0xd>
 460:	80 32       	cpi	r24, 0x20	; 32
 462:	59 f0       	breq	.+22     	; 0x47a <__stack+0x1b>
 464:	83 32       	cpi	r24, 0x23	; 35
 466:	69 f4       	brne	.+26     	; 0x482 <__stack+0x23>
 468:	20 61       	ori	r18, 0x10	; 16
 46a:	2c c0       	rjmp	.+88     	; 0x4c4 <__stack+0x65>
 46c:	8d 32       	cpi	r24, 0x2D	; 45
 46e:	39 f0       	breq	.+14     	; 0x47e <__stack+0x1f>
 470:	80 33       	cpi	r24, 0x30	; 48
 472:	39 f4       	brne	.+14     	; 0x482 <__stack+0x23>
 474:	21 60       	ori	r18, 0x01	; 1
 476:	26 c0       	rjmp	.+76     	; 0x4c4 <__stack+0x65>
 478:	22 60       	ori	r18, 0x02	; 2
 47a:	24 60       	ori	r18, 0x04	; 4
 47c:	23 c0       	rjmp	.+70     	; 0x4c4 <__stack+0x65>
 47e:	28 60       	ori	r18, 0x08	; 8
 480:	21 c0       	rjmp	.+66     	; 0x4c4 <__stack+0x65>
 482:	27 fd       	sbrc	r18, 7
 484:	27 c0       	rjmp	.+78     	; 0x4d4 <__stack+0x75>
 486:	30 ed       	ldi	r19, 0xD0	; 208
 488:	38 0f       	add	r19, r24
 48a:	3a 30       	cpi	r19, 0x0A	; 10
 48c:	78 f4       	brcc	.+30     	; 0x4ac <__stack+0x4d>
 48e:	26 ff       	sbrs	r18, 6
 490:	06 c0       	rjmp	.+12     	; 0x49e <__stack+0x3f>
 492:	fa e0       	ldi	r31, 0x0A	; 10
 494:	5f 9e       	mul	r5, r31
 496:	30 0d       	add	r19, r0
 498:	11 24       	eor	r1, r1
 49a:	53 2e       	mov	r5, r19
 49c:	13 c0       	rjmp	.+38     	; 0x4c4 <__stack+0x65>
 49e:	8a e0       	ldi	r24, 0x0A	; 10
 4a0:	38 9e       	mul	r3, r24
 4a2:	30 0d       	add	r19, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	33 2e       	mov	r3, r19
 4a8:	20 62       	ori	r18, 0x20	; 32
 4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <__stack+0x65>
 4ac:	8e 32       	cpi	r24, 0x2E	; 46
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <__stack+0x59>
 4b0:	26 fd       	sbrc	r18, 6
 4b2:	6b c1       	rjmp	.+726    	; 0x78a <__stack+0x32b>
 4b4:	20 64       	ori	r18, 0x40	; 64
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <__stack+0x65>
 4b8:	8c 36       	cpi	r24, 0x6C	; 108
 4ba:	11 f4       	brne	.+4      	; 0x4c0 <__stack+0x61>
 4bc:	20 68       	ori	r18, 0x80	; 128
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__stack+0x65>
 4c0:	88 36       	cpi	r24, 0x68	; 104
 4c2:	41 f4       	brne	.+16     	; 0x4d4 <__stack+0x75>
 4c4:	f6 01       	movw	r30, r12
 4c6:	93 fd       	sbrc	r25, 3
 4c8:	85 91       	lpm	r24, Z+
 4ca:	93 ff       	sbrs	r25, 3
 4cc:	81 91       	ld	r24, Z+
 4ce:	6f 01       	movw	r12, r30
 4d0:	81 11       	cpse	r24, r1
 4d2:	c1 cf       	rjmp	.-126    	; 0x456 <vfprintf+0x5c>
 4d4:	98 2f       	mov	r25, r24
 4d6:	9f 7d       	andi	r25, 0xDF	; 223
 4d8:	95 54       	subi	r25, 0x45	; 69
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	28 f4       	brcc	.+10     	; 0x4e8 <__stack+0x89>
 4de:	0c 5f       	subi	r16, 0xFC	; 252
 4e0:	1f 4f       	sbci	r17, 0xFF	; 255
 4e2:	ff e3       	ldi	r31, 0x3F	; 63
 4e4:	f9 83       	std	Y+1, r31	; 0x01
 4e6:	0d c0       	rjmp	.+26     	; 0x502 <__stack+0xa3>
 4e8:	83 36       	cpi	r24, 0x63	; 99
 4ea:	31 f0       	breq	.+12     	; 0x4f8 <__stack+0x99>
 4ec:	83 37       	cpi	r24, 0x73	; 115
 4ee:	71 f0       	breq	.+28     	; 0x50c <__stack+0xad>
 4f0:	83 35       	cpi	r24, 0x53	; 83
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <__stack+0x97>
 4f4:	5b c0       	rjmp	.+182    	; 0x5ac <__stack+0x14d>
 4f6:	22 c0       	rjmp	.+68     	; 0x53c <__stack+0xdd>
 4f8:	f8 01       	movw	r30, r16
 4fa:	80 81       	ld	r24, Z
 4fc:	89 83       	std	Y+1, r24	; 0x01
 4fe:	0e 5f       	subi	r16, 0xFE	; 254
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	44 24       	eor	r4, r4
 504:	43 94       	inc	r4
 506:	51 2c       	mov	r5, r1
 508:	54 01       	movw	r10, r8
 50a:	15 c0       	rjmp	.+42     	; 0x536 <__stack+0xd7>
 50c:	38 01       	movw	r6, r16
 50e:	f2 e0       	ldi	r31, 0x02	; 2
 510:	6f 0e       	add	r6, r31
 512:	71 1c       	adc	r7, r1
 514:	f8 01       	movw	r30, r16
 516:	a0 80       	ld	r10, Z
 518:	b1 80       	ldd	r11, Z+1	; 0x01
 51a:	26 ff       	sbrs	r18, 6
 51c:	03 c0       	rjmp	.+6      	; 0x524 <__stack+0xc5>
 51e:	65 2d       	mov	r22, r5
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0xc9>
 524:	6f ef       	ldi	r22, 0xFF	; 255
 526:	7f ef       	ldi	r23, 0xFF	; 255
 528:	c5 01       	movw	r24, r10
 52a:	2c 87       	std	Y+12, r18	; 0x0c
 52c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <strnlen>
 530:	2c 01       	movw	r4, r24
 532:	83 01       	movw	r16, r6
 534:	2c 85       	ldd	r18, Y+12	; 0x0c
 536:	2f 77       	andi	r18, 0x7F	; 127
 538:	22 2e       	mov	r2, r18
 53a:	17 c0       	rjmp	.+46     	; 0x56a <__stack+0x10b>
 53c:	38 01       	movw	r6, r16
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	6f 0e       	add	r6, r31
 542:	71 1c       	adc	r7, r1
 544:	f8 01       	movw	r30, r16
 546:	a0 80       	ld	r10, Z
 548:	b1 80       	ldd	r11, Z+1	; 0x01
 54a:	26 ff       	sbrs	r18, 6
 54c:	03 c0       	rjmp	.+6      	; 0x554 <__stack+0xf5>
 54e:	65 2d       	mov	r22, r5
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <__stack+0xf9>
 554:	6f ef       	ldi	r22, 0xFF	; 255
 556:	7f ef       	ldi	r23, 0xFF	; 255
 558:	c5 01       	movw	r24, r10
 55a:	2c 87       	std	Y+12, r18	; 0x0c
 55c:	0e 94 cf 03 	call	0x79e	; 0x79e <strnlen_P>
 560:	2c 01       	movw	r4, r24
 562:	2c 85       	ldd	r18, Y+12	; 0x0c
 564:	20 68       	ori	r18, 0x80	; 128
 566:	22 2e       	mov	r2, r18
 568:	83 01       	movw	r16, r6
 56a:	23 fc       	sbrc	r2, 3
 56c:	1b c0       	rjmp	.+54     	; 0x5a4 <__stack+0x145>
 56e:	83 2d       	mov	r24, r3
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	48 16       	cp	r4, r24
 574:	59 06       	cpc	r5, r25
 576:	b0 f4       	brcc	.+44     	; 0x5a4 <__stack+0x145>
 578:	b7 01       	movw	r22, r14
 57a:	80 e2       	ldi	r24, 0x20	; 32
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 582:	3a 94       	dec	r3
 584:	f4 cf       	rjmp	.-24     	; 0x56e <__stack+0x10f>
 586:	f5 01       	movw	r30, r10
 588:	27 fc       	sbrc	r2, 7
 58a:	85 91       	lpm	r24, Z+
 58c:	27 fe       	sbrs	r2, 7
 58e:	81 91       	ld	r24, Z+
 590:	5f 01       	movw	r10, r30
 592:	b7 01       	movw	r22, r14
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 59a:	31 10       	cpse	r3, r1
 59c:	3a 94       	dec	r3
 59e:	f1 e0       	ldi	r31, 0x01	; 1
 5a0:	4f 1a       	sub	r4, r31
 5a2:	51 08       	sbc	r5, r1
 5a4:	41 14       	cp	r4, r1
 5a6:	51 04       	cpc	r5, r1
 5a8:	71 f7       	brne	.-36     	; 0x586 <__stack+0x127>
 5aa:	e5 c0       	rjmp	.+458    	; 0x776 <__stack+0x317>
 5ac:	84 36       	cpi	r24, 0x64	; 100
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__stack+0x155>
 5b0:	89 36       	cpi	r24, 0x69	; 105
 5b2:	39 f5       	brne	.+78     	; 0x602 <__stack+0x1a3>
 5b4:	f8 01       	movw	r30, r16
 5b6:	27 ff       	sbrs	r18, 7
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <__stack+0x169>
 5ba:	60 81       	ld	r22, Z
 5bc:	71 81       	ldd	r23, Z+1	; 0x01
 5be:	82 81       	ldd	r24, Z+2	; 0x02
 5c0:	93 81       	ldd	r25, Z+3	; 0x03
 5c2:	0c 5f       	subi	r16, 0xFC	; 252
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <__stack+0x179>
 5c8:	60 81       	ld	r22, Z
 5ca:	71 81       	ldd	r23, Z+1	; 0x01
 5cc:	88 27       	eor	r24, r24
 5ce:	77 fd       	sbrc	r23, 7
 5d0:	80 95       	com	r24
 5d2:	98 2f       	mov	r25, r24
 5d4:	0e 5f       	subi	r16, 0xFE	; 254
 5d6:	1f 4f       	sbci	r17, 0xFF	; 255
 5d8:	2f 76       	andi	r18, 0x6F	; 111
 5da:	b2 2e       	mov	r11, r18
 5dc:	97 ff       	sbrs	r25, 7
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__stack+0x193>
 5e0:	90 95       	com	r25
 5e2:	80 95       	com	r24
 5e4:	70 95       	com	r23
 5e6:	61 95       	neg	r22
 5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	20 68       	ori	r18, 0x80	; 128
 5f0:	b2 2e       	mov	r11, r18
 5f2:	2a e0       	ldi	r18, 0x0A	; 10
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	a4 01       	movw	r20, r8
 5f8:	0e 94 17 04 	call	0x82e	; 0x82e <__ultoa_invert>
 5fc:	a8 2e       	mov	r10, r24
 5fe:	a8 18       	sub	r10, r8
 600:	44 c0       	rjmp	.+136    	; 0x68a <__stack+0x22b>
 602:	85 37       	cpi	r24, 0x75	; 117
 604:	29 f4       	brne	.+10     	; 0x610 <__stack+0x1b1>
 606:	2f 7e       	andi	r18, 0xEF	; 239
 608:	b2 2e       	mov	r11, r18
 60a:	2a e0       	ldi	r18, 0x0A	; 10
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	25 c0       	rjmp	.+74     	; 0x65a <__stack+0x1fb>
 610:	f2 2f       	mov	r31, r18
 612:	f9 7f       	andi	r31, 0xF9	; 249
 614:	bf 2e       	mov	r11, r31
 616:	8f 36       	cpi	r24, 0x6F	; 111
 618:	c1 f0       	breq	.+48     	; 0x64a <__stack+0x1eb>
 61a:	18 f4       	brcc	.+6      	; 0x622 <__stack+0x1c3>
 61c:	88 35       	cpi	r24, 0x58	; 88
 61e:	79 f0       	breq	.+30     	; 0x63e <__stack+0x1df>
 620:	b4 c0       	rjmp	.+360    	; 0x78a <__stack+0x32b>
 622:	80 37       	cpi	r24, 0x70	; 112
 624:	19 f0       	breq	.+6      	; 0x62c <__stack+0x1cd>
 626:	88 37       	cpi	r24, 0x78	; 120
 628:	21 f0       	breq	.+8      	; 0x632 <__stack+0x1d3>
 62a:	af c0       	rjmp	.+350    	; 0x78a <__stack+0x32b>
 62c:	2f 2f       	mov	r18, r31
 62e:	20 61       	ori	r18, 0x10	; 16
 630:	b2 2e       	mov	r11, r18
 632:	b4 fe       	sbrs	r11, 4
 634:	0d c0       	rjmp	.+26     	; 0x650 <__stack+0x1f1>
 636:	8b 2d       	mov	r24, r11
 638:	84 60       	ori	r24, 0x04	; 4
 63a:	b8 2e       	mov	r11, r24
 63c:	09 c0       	rjmp	.+18     	; 0x650 <__stack+0x1f1>
 63e:	24 ff       	sbrs	r18, 4
 640:	0a c0       	rjmp	.+20     	; 0x656 <__stack+0x1f7>
 642:	9f 2f       	mov	r25, r31
 644:	96 60       	ori	r25, 0x06	; 6
 646:	b9 2e       	mov	r11, r25
 648:	06 c0       	rjmp	.+12     	; 0x656 <__stack+0x1f7>
 64a:	28 e0       	ldi	r18, 0x08	; 8
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__stack+0x1fb>
 650:	20 e1       	ldi	r18, 0x10	; 16
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <__stack+0x1fb>
 656:	20 e1       	ldi	r18, 0x10	; 16
 658:	32 e0       	ldi	r19, 0x02	; 2
 65a:	f8 01       	movw	r30, r16
 65c:	b7 fe       	sbrs	r11, 7
 65e:	07 c0       	rjmp	.+14     	; 0x66e <__stack+0x20f>
 660:	60 81       	ld	r22, Z
 662:	71 81       	ldd	r23, Z+1	; 0x01
 664:	82 81       	ldd	r24, Z+2	; 0x02
 666:	93 81       	ldd	r25, Z+3	; 0x03
 668:	0c 5f       	subi	r16, 0xFC	; 252
 66a:	1f 4f       	sbci	r17, 0xFF	; 255
 66c:	06 c0       	rjmp	.+12     	; 0x67a <__stack+0x21b>
 66e:	60 81       	ld	r22, Z
 670:	71 81       	ldd	r23, Z+1	; 0x01
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 5f       	subi	r16, 0xFE	; 254
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	a4 01       	movw	r20, r8
 67c:	0e 94 17 04 	call	0x82e	; 0x82e <__ultoa_invert>
 680:	a8 2e       	mov	r10, r24
 682:	a8 18       	sub	r10, r8
 684:	fb 2d       	mov	r31, r11
 686:	ff 77       	andi	r31, 0x7F	; 127
 688:	bf 2e       	mov	r11, r31
 68a:	b6 fe       	sbrs	r11, 6
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <__stack+0x245>
 68e:	2b 2d       	mov	r18, r11
 690:	2e 7f       	andi	r18, 0xFE	; 254
 692:	a5 14       	cp	r10, r5
 694:	50 f4       	brcc	.+20     	; 0x6aa <__stack+0x24b>
 696:	b4 fe       	sbrs	r11, 4
 698:	0a c0       	rjmp	.+20     	; 0x6ae <__stack+0x24f>
 69a:	b2 fc       	sbrc	r11, 2
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <__stack+0x24f>
 69e:	2b 2d       	mov	r18, r11
 6a0:	2e 7e       	andi	r18, 0xEE	; 238
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <__stack+0x24f>
 6a4:	7a 2c       	mov	r7, r10
 6a6:	2b 2d       	mov	r18, r11
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <__stack+0x251>
 6aa:	7a 2c       	mov	r7, r10
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__stack+0x251>
 6ae:	75 2c       	mov	r7, r5
 6b0:	24 ff       	sbrs	r18, 4
 6b2:	0d c0       	rjmp	.+26     	; 0x6ce <__stack+0x26f>
 6b4:	fe 01       	movw	r30, r28
 6b6:	ea 0d       	add	r30, r10
 6b8:	f1 1d       	adc	r31, r1
 6ba:	80 81       	ld	r24, Z
 6bc:	80 33       	cpi	r24, 0x30	; 48
 6be:	11 f4       	brne	.+4      	; 0x6c4 <__stack+0x265>
 6c0:	29 7e       	andi	r18, 0xE9	; 233
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <__stack+0x277>
 6c4:	22 ff       	sbrs	r18, 2
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <__stack+0x275>
 6c8:	73 94       	inc	r7
 6ca:	73 94       	inc	r7
 6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__stack+0x277>
 6ce:	82 2f       	mov	r24, r18
 6d0:	86 78       	andi	r24, 0x86	; 134
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <__stack+0x277>
 6d4:	73 94       	inc	r7
 6d6:	23 fd       	sbrc	r18, 3
 6d8:	13 c0       	rjmp	.+38     	; 0x700 <__stack+0x2a1>
 6da:	20 ff       	sbrs	r18, 0
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <__stack+0x28b>
 6de:	5a 2c       	mov	r5, r10
 6e0:	73 14       	cp	r7, r3
 6e2:	18 f4       	brcc	.+6      	; 0x6ea <__stack+0x28b>
 6e4:	53 0c       	add	r5, r3
 6e6:	57 18       	sub	r5, r7
 6e8:	73 2c       	mov	r7, r3
 6ea:	73 14       	cp	r7, r3
 6ec:	68 f4       	brcc	.+26     	; 0x708 <__stack+0x2a9>
 6ee:	b7 01       	movw	r22, r14
 6f0:	80 e2       	ldi	r24, 0x20	; 32
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	2c 87       	std	Y+12, r18	; 0x0c
 6f6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 6fa:	73 94       	inc	r7
 6fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 6fe:	f5 cf       	rjmp	.-22     	; 0x6ea <__stack+0x28b>
 700:	73 14       	cp	r7, r3
 702:	10 f4       	brcc	.+4      	; 0x708 <__stack+0x2a9>
 704:	37 18       	sub	r3, r7
 706:	01 c0       	rjmp	.+2      	; 0x70a <__stack+0x2ab>
 708:	31 2c       	mov	r3, r1
 70a:	24 ff       	sbrs	r18, 4
 70c:	12 c0       	rjmp	.+36     	; 0x732 <__stack+0x2d3>
 70e:	b7 01       	movw	r22, r14
 710:	80 e3       	ldi	r24, 0x30	; 48
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	2c 87       	std	Y+12, r18	; 0x0c
 716:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 71a:	2c 85       	ldd	r18, Y+12	; 0x0c
 71c:	22 ff       	sbrs	r18, 2
 71e:	17 c0       	rjmp	.+46     	; 0x74e <__stack+0x2ef>
 720:	21 ff       	sbrs	r18, 1
 722:	03 c0       	rjmp	.+6      	; 0x72a <__stack+0x2cb>
 724:	88 e5       	ldi	r24, 0x58	; 88
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 c0       	rjmp	.+4      	; 0x72e <__stack+0x2cf>
 72a:	88 e7       	ldi	r24, 0x78	; 120
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	b7 01       	movw	r22, r14
 730:	0c c0       	rjmp	.+24     	; 0x74a <__stack+0x2eb>
 732:	82 2f       	mov	r24, r18
 734:	86 78       	andi	r24, 0x86	; 134
 736:	59 f0       	breq	.+22     	; 0x74e <__stack+0x2ef>
 738:	21 fd       	sbrc	r18, 1
 73a:	02 c0       	rjmp	.+4      	; 0x740 <__stack+0x2e1>
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	01 c0       	rjmp	.+2      	; 0x742 <__stack+0x2e3>
 740:	8b e2       	ldi	r24, 0x2B	; 43
 742:	27 fd       	sbrc	r18, 7
 744:	8d e2       	ldi	r24, 0x2D	; 45
 746:	b7 01       	movw	r22, r14
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 74e:	a5 14       	cp	r10, r5
 750:	38 f4       	brcc	.+14     	; 0x760 <__stack+0x301>
 752:	b7 01       	movw	r22, r14
 754:	80 e3       	ldi	r24, 0x30	; 48
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 75c:	5a 94       	dec	r5
 75e:	f7 cf       	rjmp	.-18     	; 0x74e <__stack+0x2ef>
 760:	aa 94       	dec	r10
 762:	f4 01       	movw	r30, r8
 764:	ea 0d       	add	r30, r10
 766:	f1 1d       	adc	r31, r1
 768:	80 81       	ld	r24, Z
 76a:	b7 01       	movw	r22, r14
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 772:	a1 10       	cpse	r10, r1
 774:	f5 cf       	rjmp	.-22     	; 0x760 <__stack+0x301>
 776:	33 20       	and	r3, r3
 778:	09 f4       	brne	.+2      	; 0x77c <__stack+0x31d>
 77a:	51 ce       	rjmp	.-862    	; 0x41e <vfprintf+0x24>
 77c:	b7 01       	movw	r22, r14
 77e:	80 e2       	ldi	r24, 0x20	; 32
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 e5 03 	call	0x7ca	; 0x7ca <fputc>
 786:	3a 94       	dec	r3
 788:	f6 cf       	rjmp	.-20     	; 0x776 <__stack+0x317>
 78a:	f7 01       	movw	r30, r14
 78c:	86 81       	ldd	r24, Z+6	; 0x06
 78e:	97 81       	ldd	r25, Z+7	; 0x07
 790:	02 c0       	rjmp	.+4      	; 0x796 <__stack+0x337>
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	9f ef       	ldi	r25, 0xFF	; 255
 796:	2c 96       	adiw	r28, 0x0c	; 12
 798:	e2 e1       	ldi	r30, 0x12	; 18
 79a:	0c 94 91 04 	jmp	0x922	; 0x922 <__epilogue_restores__>

0000079e <strnlen_P>:
 79e:	fc 01       	movw	r30, r24
 7a0:	05 90       	lpm	r0, Z+
 7a2:	61 50       	subi	r22, 0x01	; 1
 7a4:	70 40       	sbci	r23, 0x00	; 0
 7a6:	01 10       	cpse	r0, r1
 7a8:	d8 f7       	brcc	.-10     	; 0x7a0 <strnlen_P+0x2>
 7aa:	80 95       	com	r24
 7ac:	90 95       	com	r25
 7ae:	8e 0f       	add	r24, r30
 7b0:	9f 1f       	adc	r25, r31
 7b2:	08 95       	ret

000007b4 <strnlen>:
 7b4:	fc 01       	movw	r30, r24
 7b6:	61 50       	subi	r22, 0x01	; 1
 7b8:	70 40       	sbci	r23, 0x00	; 0
 7ba:	01 90       	ld	r0, Z+
 7bc:	01 10       	cpse	r0, r1
 7be:	d8 f7       	brcc	.-10     	; 0x7b6 <strnlen+0x2>
 7c0:	80 95       	com	r24
 7c2:	90 95       	com	r25
 7c4:	8e 0f       	add	r24, r30
 7c6:	9f 1f       	adc	r25, r31
 7c8:	08 95       	ret

000007ca <fputc>:
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	18 2f       	mov	r17, r24
 7d4:	09 2f       	mov	r16, r25
 7d6:	eb 01       	movw	r28, r22
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	81 fd       	sbrc	r24, 1
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <fputc+0x1a>
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	9f ef       	ldi	r25, 0xFF	; 255
 7e2:	20 c0       	rjmp	.+64     	; 0x824 <fputc+0x5a>
 7e4:	82 ff       	sbrs	r24, 2
 7e6:	10 c0       	rjmp	.+32     	; 0x808 <fputc+0x3e>
 7e8:	4e 81       	ldd	r20, Y+6	; 0x06
 7ea:	5f 81       	ldd	r21, Y+7	; 0x07
 7ec:	2c 81       	ldd	r18, Y+4	; 0x04
 7ee:	3d 81       	ldd	r19, Y+5	; 0x05
 7f0:	42 17       	cp	r20, r18
 7f2:	53 07       	cpc	r21, r19
 7f4:	7c f4       	brge	.+30     	; 0x814 <fputc+0x4a>
 7f6:	e8 81       	ld	r30, Y
 7f8:	f9 81       	ldd	r31, Y+1	; 0x01
 7fa:	9f 01       	movw	r18, r30
 7fc:	2f 5f       	subi	r18, 0xFF	; 255
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
 800:	39 83       	std	Y+1, r19	; 0x01
 802:	28 83       	st	Y, r18
 804:	10 83       	st	Z, r17
 806:	06 c0       	rjmp	.+12     	; 0x814 <fputc+0x4a>
 808:	e8 85       	ldd	r30, Y+8	; 0x08
 80a:	f9 85       	ldd	r31, Y+9	; 0x09
 80c:	81 2f       	mov	r24, r17
 80e:	09 95       	icall
 810:	89 2b       	or	r24, r25
 812:	29 f7       	brne	.-54     	; 0x7de <fputc+0x14>
 814:	2e 81       	ldd	r18, Y+6	; 0x06
 816:	3f 81       	ldd	r19, Y+7	; 0x07
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	3f 83       	std	Y+7, r19	; 0x07
 81e:	2e 83       	std	Y+6, r18	; 0x06
 820:	81 2f       	mov	r24, r17
 822:	90 2f       	mov	r25, r16
 824:	df 91       	pop	r29
 826:	cf 91       	pop	r28
 828:	1f 91       	pop	r17
 82a:	0f 91       	pop	r16
 82c:	08 95       	ret

0000082e <__ultoa_invert>:
 82e:	fa 01       	movw	r30, r20
 830:	aa 27       	eor	r26, r26
 832:	28 30       	cpi	r18, 0x08	; 8
 834:	51 f1       	breq	.+84     	; 0x88a <__ultoa_invert+0x5c>
 836:	20 31       	cpi	r18, 0x10	; 16
 838:	81 f1       	breq	.+96     	; 0x89a <__ultoa_invert+0x6c>
 83a:	e8 94       	clt
 83c:	6f 93       	push	r22
 83e:	6e 7f       	andi	r22, 0xFE	; 254
 840:	6e 5f       	subi	r22, 0xFE	; 254
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	af 4f       	sbci	r26, 0xFF	; 255
 84a:	b1 e0       	ldi	r27, 0x01	; 1
 84c:	3e d0       	rcall	.+124    	; 0x8ca <__ultoa_invert+0x9c>
 84e:	b4 e0       	ldi	r27, 0x04	; 4
 850:	3c d0       	rcall	.+120    	; 0x8ca <__ultoa_invert+0x9c>
 852:	67 0f       	add	r22, r23
 854:	78 1f       	adc	r23, r24
 856:	89 1f       	adc	r24, r25
 858:	9a 1f       	adc	r25, r26
 85a:	a1 1d       	adc	r26, r1
 85c:	68 0f       	add	r22, r24
 85e:	79 1f       	adc	r23, r25
 860:	8a 1f       	adc	r24, r26
 862:	91 1d       	adc	r25, r1
 864:	a1 1d       	adc	r26, r1
 866:	6a 0f       	add	r22, r26
 868:	71 1d       	adc	r23, r1
 86a:	81 1d       	adc	r24, r1
 86c:	91 1d       	adc	r25, r1
 86e:	a1 1d       	adc	r26, r1
 870:	20 d0       	rcall	.+64     	; 0x8b2 <__ultoa_invert+0x84>
 872:	09 f4       	brne	.+2      	; 0x876 <__ultoa_invert+0x48>
 874:	68 94       	set
 876:	3f 91       	pop	r19
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	26 9f       	mul	r18, r22
 87c:	11 24       	eor	r1, r1
 87e:	30 19       	sub	r19, r0
 880:	30 5d       	subi	r19, 0xD0	; 208
 882:	31 93       	st	Z+, r19
 884:	de f6       	brtc	.-74     	; 0x83c <__ultoa_invert+0xe>
 886:	cf 01       	movw	r24, r30
 888:	08 95       	ret
 88a:	46 2f       	mov	r20, r22
 88c:	47 70       	andi	r20, 0x07	; 7
 88e:	40 5d       	subi	r20, 0xD0	; 208
 890:	41 93       	st	Z+, r20
 892:	b3 e0       	ldi	r27, 0x03	; 3
 894:	0f d0       	rcall	.+30     	; 0x8b4 <__ultoa_invert+0x86>
 896:	c9 f7       	brne	.-14     	; 0x88a <__ultoa_invert+0x5c>
 898:	f6 cf       	rjmp	.-20     	; 0x886 <__ultoa_invert+0x58>
 89a:	46 2f       	mov	r20, r22
 89c:	4f 70       	andi	r20, 0x0F	; 15
 89e:	40 5d       	subi	r20, 0xD0	; 208
 8a0:	4a 33       	cpi	r20, 0x3A	; 58
 8a2:	18 f0       	brcs	.+6      	; 0x8aa <__ultoa_invert+0x7c>
 8a4:	49 5d       	subi	r20, 0xD9	; 217
 8a6:	31 fd       	sbrc	r19, 1
 8a8:	40 52       	subi	r20, 0x20	; 32
 8aa:	41 93       	st	Z+, r20
 8ac:	02 d0       	rcall	.+4      	; 0x8b2 <__ultoa_invert+0x84>
 8ae:	a9 f7       	brne	.-22     	; 0x89a <__ultoa_invert+0x6c>
 8b0:	ea cf       	rjmp	.-44     	; 0x886 <__ultoa_invert+0x58>
 8b2:	b4 e0       	ldi	r27, 0x04	; 4
 8b4:	a6 95       	lsr	r26
 8b6:	97 95       	ror	r25
 8b8:	87 95       	ror	r24
 8ba:	77 95       	ror	r23
 8bc:	67 95       	ror	r22
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__ultoa_invert+0x86>
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	61 05       	cpc	r22, r1
 8c6:	71 05       	cpc	r23, r1
 8c8:	08 95       	ret
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	0a 2e       	mov	r0, r26
 8d0:	06 94       	lsr	r0
 8d2:	57 95       	ror	r21
 8d4:	47 95       	ror	r20
 8d6:	37 95       	ror	r19
 8d8:	27 95       	ror	r18
 8da:	ba 95       	dec	r27
 8dc:	c9 f7       	brne	.-14     	; 0x8d0 <__ultoa_invert+0xa2>
 8de:	62 0f       	add	r22, r18
 8e0:	73 1f       	adc	r23, r19
 8e2:	84 1f       	adc	r24, r20
 8e4:	95 1f       	adc	r25, r21
 8e6:	a0 1d       	adc	r26, r0
 8e8:	08 95       	ret

000008ea <__prologue_saves__>:
 8ea:	2f 92       	push	r2
 8ec:	3f 92       	push	r3
 8ee:	4f 92       	push	r4
 8f0:	5f 92       	push	r5
 8f2:	6f 92       	push	r6
 8f4:	7f 92       	push	r7
 8f6:	8f 92       	push	r8
 8f8:	9f 92       	push	r9
 8fa:	af 92       	push	r10
 8fc:	bf 92       	push	r11
 8fe:	cf 92       	push	r12
 900:	df 92       	push	r13
 902:	ef 92       	push	r14
 904:	ff 92       	push	r15
 906:	0f 93       	push	r16
 908:	1f 93       	push	r17
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62
 912:	ca 1b       	sub	r28, r26
 914:	db 0b       	sbc	r29, r27
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	09 94       	ijmp

00000922 <__epilogue_restores__>:
 922:	2a 88       	ldd	r2, Y+18	; 0x12
 924:	39 88       	ldd	r3, Y+17	; 0x11
 926:	48 88       	ldd	r4, Y+16	; 0x10
 928:	5f 84       	ldd	r5, Y+15	; 0x0f
 92a:	6e 84       	ldd	r6, Y+14	; 0x0e
 92c:	7d 84       	ldd	r7, Y+13	; 0x0d
 92e:	8c 84       	ldd	r8, Y+12	; 0x0c
 930:	9b 84       	ldd	r9, Y+11	; 0x0b
 932:	aa 84       	ldd	r10, Y+10	; 0x0a
 934:	b9 84       	ldd	r11, Y+9	; 0x09
 936:	c8 84       	ldd	r12, Y+8	; 0x08
 938:	df 80       	ldd	r13, Y+7	; 0x07
 93a:	ee 80       	ldd	r14, Y+6	; 0x06
 93c:	fd 80       	ldd	r15, Y+5	; 0x05
 93e:	0c 81       	ldd	r16, Y+4	; 0x04
 940:	1b 81       	ldd	r17, Y+3	; 0x03
 942:	aa 81       	ldd	r26, Y+2	; 0x02
 944:	b9 81       	ldd	r27, Y+1	; 0x01
 946:	ce 0f       	add	r28, r30
 948:	d1 1d       	adc	r29, r1
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	ed 01       	movw	r28, r26
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
